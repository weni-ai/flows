import environ
import re
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

from django.utils.translation import ugettext_lazy as _  # noqa

from .settings_common import *  # noqa

env = environ.Env()

# GENERAL
# ------------------------------------------------------------------------------
DEBUG = env.bool("DEBUG", default=False)
IS_PROD = env.bool("IS_PROD", default=True)
IP_ADDRESSES = env.tuple("IP_ADDRESSES", default=("localhost",))
SECRET_KEY = env("SECRET_KEY")
USER_TIME_ZONE = env("USER_TIME_ZONE", default="America/Sao_Paulo")
ALLOWED_HOSTS = env("ALLOWED_HOSTS", default=["*"])
TEMPLATE_DEBUG = DEBUG

SEND_MESSAGES = env.bool("SEND_MESSAGES", default=True)
SEND_WEBHOOKS = env.bool("SEND_WEBHOOKS", default=True)
SEND_EMAILS = env.bool("SEND_EMAILS", default=True)
SEND_AIRTIME = env.bool("SEND_AIRTIME", default=True)
SEND_CALLS = env.bool("SEND_CALLS", default=True)
SEND_CHATBASE = env.bool("SEND_CHATBASE", default=True)

# BRANDING
# ------------------------------------------------------------------------------
brand_info = env.dict(
    "BRANDING_INFO",
    default={
        "slug": "rapidpro",
        "name": "RapidPro",
        "org": "UNICEF",
        "email": "join@rapidpro.io",
        "domain": "app.rapidpro.io",
        "folder": "rapidpro",
        "allow_signups": True,
        "description": "Visually build nationally scalable mobile applications from anywhere in the world.",
        "credits": "Copyright &copy; 2012-2017 UNICEF, Nyaruka. All Rights Reserved.",
    },
)

privacy_url = f"https://{brand_info.get('domain')}/policy"
brand_info[
    "credits"
] = f"Copyright &copy; 2012-2022 Weni. All Rights Reserved. <br> <a href='{privacy_url}' class='p-1 text-gray-500 underline'>Privacy</a>"

DEFAULT_BRAND = env("DEFAULT_BRAND", default="rapidpro.io")
DEFAULT_PLAN = env("DEFAULT_PLAN", default=TOPUP_PLAN)
BRANDING = {
    DEFAULT_BRAND: {
        "slug": brand_info.get("slug"),
        "name": brand_info.get("name"),
        "org": brand_info.get("org"),
        "colors": env.dict("BRANDING_COLORS", default=dict(primary="#0c6596")),
        "styles": env.list("BRANDING_STYLES", default=["brands/rapidpro/font/style.css"]),
        "default_plan": DEFAULT_PLAN,
        "welcome_topup": 1000,
        "email": brand_info.get("email"),
        "support_email": brand_info.get("email"),
        "link": "https://{}".format(brand_info.get("domain")),
        "api_link": "https://{}".format(brand_info.get("domain")),
        "docs_link": brand_info.get("docs_link"),
        "domain": brand_info.get("domain"),
        "ticket_domain": brand_info.get("ticket_domain"),
        "favico": "brands/{}/push.ico".format(brand_info.get("folder")),
        "splash": "brands/{}/splash.jpg".format(brand_info.get("folder")),
        "logo": "brands/{}/logo.png".format(brand_info.get("folder")),
        "allow_signups": bool(brand_info.get("allow_signups")),
        "flow_types": ["M", "V", "B", "S"],  # see Flow.FLOW_TYPES
        "location_support": True,
        "tiers": dict(import_flows=0, multi_user=0, multi_org=0),
        "bundles": [],
        "welcome_packs": [dict(size=5000, name="Demo Account"), dict(size=1000000, name="Normal Account")],
        "title": _(brand_info.get("title")),
        "description": _(brand_info.get("description")),
        "credits": _(brand_info.get("credits")),
    }
}
HOSTNAME = DEFAULT_BRAND

# VARIABLES TO API REQUISITIONS
# ------------------------------------------------------------------------------

REST_FRAMEWORK["DEFAULT_THROTTLE_RATES"]["v2"] = env("V2", default="3000/hour")
REST_FRAMEWORK["DEFAULT_THROTTLE_RATES"]["v2.contacts"] = env("V2_CONTACTS", default="3000/hour")
REST_FRAMEWORK["DEFAULT_THROTTLE_RATES"]["v2.messages"] = env("V2_MESSAGES", default="3000/hour")
REST_FRAMEWORK["DEFAULT_THROTTLE_RATES"]["v2.broadcasts"] = env("V2_BROADCASTS", default="36000/hour")
REST_FRAMEWORK["DEFAULT_THROTTLE_RATES"]["v2.runs"] = env("V2_RUNS", default="3000/hour")
REST_FRAMEWORK["DEFAULT_THROTTLE_RATES"]["v2.api"] = env("V2_API", default="3000/hour")
REST_FRAMEWORK["PAGE_SIZE"] = env.int("REST_FRAMEWORK_PAGE_SIZE", default=250)
REST_FRAMEWORK["DEFAULT_AUTHENTICATION_CLASSES"] = [
    "mozilla_django_oidc.contrib.drf.OIDCAuthentication",
    "temba.api.support.APISessionAuthentication",
    "temba.api.support.APITokenAuthentication",
    "temba.api.support.APIBasicAuthentication",
]


# EMAIL
# ------------------------------------------------------------------------------
EMAIL_HOST = env("EMAIL_HOST", default="")
EMAIL_HOST_USER = env("EMAIL_HOST_USER", default="")
DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL", default="")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD", default="")
EMAIL_PORT = env.int("EMAIL_PORT", default=587)
EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", default=True)
FLOW_FROM_EMAIL = DEFAULT_FROM_EMAIL

# COMPRESS
# ------------------------------------------------------------------------------
COMPRESS_ENABLED = env.bool("COMPRESS_ENABLED", default=True)
COMPRESS_OFFLINE = env.bool("COMPRESS_OFFLINE", default=True)
COMPRESS_FILTERS = {
    "css": ["compressor.filters.css_default.CssAbsoluteFilter", "compressor.filters.cssmin.CSSMinFilter"],
    "js": ["compressor.filters.jsmin.JSMinFilter"],
}

COMPRESS_CSS_HASHING_METHOD = "content"
COMPRESS_OFFLINE_CONTEXT = dict(
    STATIC_URL=STATIC_URL, base_template="frame.html", brand=BRANDING.get(DEFAULT_BRAND), debug=False, testing=False
)

# ------------------------------------------------------------------------------
# MIDDLEWARE
# ------------------------------------------------------------------------------
# Firstly, we remove obsolete XFrameOptionsMiddleware from settings_common:
MIDDLEWARE = tuple(m for m in MIDDLEWARE if "XFrameOptionsMiddleware" not in m)
# Now, we can add ours (including csp)
MIDDLEWARE += (
    "corsheaders.middleware.CorsMiddleware",
    "elasticapm.contrib.django.middleware.TracingMiddleware",
    "elasticapm.contrib.django.middleware.Catch404Middleware",
    "csp.middleware.CSPMiddleware",
)

# REDIS
# ------------------------------------------------------------------------------
REDIS_HOST = env("REDIS_HOST")
REDIS_PORT = env("REDIS_PORT", default=6379)
REDIS_DB = env("REDIS_DB", default=10)
REDIS_URL = "redis://{}:{}/{}".format(REDIS_HOST, REDIS_PORT, REDIS_DB)

# DATABASE
# ------------------------------------------------------------------------------
DATABASES = {}
DATABASES["default"] = env.db("DATABASE_URL")
DATABASES["default"]["ATOMIC_REQUESTS"] = True
DATABASES["default"]["CONN_MAX_AGE"] = env.int("CONN_MAX_AGE", default=60)

if env.bool("DATABASE_USE_SSL", default=True):
    DATABASES["default"]["OPTIONS"]["sslmode"] = "verify-ca"
    DATABASES["default"]["OPTIONS"]["sslrootcert"] = "/etc/ssl/certs/rds.pem"

DATABASES["readonly"] = DATABASES["default"].copy()

# BROKER
# ------------------------------------------------------------------------------
CELERY_BROKER_URL = REDIS_URL
BROKER_BACKEND = env("BROKER_BACKEND", default="redis")

# CACHES
# ------------------------------------------------------------------------------
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
    }
}

# AWS BUCKET AND MEDIA STORAGE
# ------------------------------------------------------------------------------
AWS_S3_ENDPOINT_URL = env("AWS_S3_ENDPOINT_URL", default=None)
AWS_ACCESS_KEY_ID = env("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = env("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = env("AWS_STORAGE_BUCKET_NAME")
AWS_QUERYSTRING_AUTH = env.bool("AWS_QUERYSTRING_AUTH", default=False)
AWS_BUCKET_DOMAIN = env("AWS_BUCKET_DOMAIN", default=f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com")
AWS_S3_SIGNATURE_VERSION = "s3v4"
STORAGE_URL = f"https://{AWS_BUCKET_DOMAIN}"

DEFAULT_FILE_STORAGE = env("DEFAULT_FILE_STORAGE", default="storages.backends.s3boto3.S3Boto3Storage")

S3_NETWORK_TIMEOUT = env.int("S3_NETWORK_TIMEOUT", default=120)
S3_NETWORK_RETRY_COUNT = env.int("S3_NETWORK_RETRY_COUNT", default=5)

COURIER_S3_ENDPOINT = env("COURIER_S3_ENDPOINT")

# CELERY
# ------------------------------------------------------------------------------
CELERY_TIMEZONE = env("CELERY_TIMEZONE", default="UTC")

# SEGMENT
# ------------------------------------------------------------------------------
SEGMENT_IO_KEY = env("SEGMENT_IO_KEY", default="")

# TWITTER
# ------------------------------------------------------------------------------
TWITTER_API_KEY = env("TWITTER_API_KEY", default="")
TWITTER_API_SECRET = env("TWITTER_API_SECRET", default="")

# MAILROOM
# ------------------------------------------------------------------------------
MAILROOM_URL = env("MAILROOM_URL")
MAILROOM_AUTH_TOKEN = env("MAILROOM_AUTH_TOKEN")

# ELASTIC SEARCH
# ------------------------------------------------------------------------------
ELASTICSEARCH_URL = env("ELASTICSEARCH_URL")

# APPS
# ------------------------------------------------------------------------------
INSTALLED_APPS += (
    # Production environment
    "gunicorn",
    "storages",
    "elasticapm.contrib.django",
    # gRPC
    "django_grpc_framework",
    # Weni apps
    "weni.template_message",
    "weni.channel_stats",
    "weni.analytics_api",
    "weni.grpc.core",
    "weni.grpc.org",
    "weni.grpc.user",
    "weni.grpc.flow",
    "weni.grpc.billing",
    "weni.grpc.statistic",
    "weni.internal",
    "weni.ticketer_queues",
    "weni.orgs_api",
    "weni.s3",
    "weni.success_orgs",
    "weni.activities",
    # OIDC authentication
    "mozilla_django_oidc",
    "weni.auth",
    # Templates (django-template-macros)
    "macros",
    "corsheaders",
)

# SENTRY
# ------------------------------------------------------------------------------
sentry_sdk.init(dsn=env("SENTRY_DSN", default=""), integrations=[DjangoIntegration()])

# LOGGING
# ------------------------------------------------------------------------------
LOGGING = {
    "version": 1,
    "disable_existing_loggers": env("DISABLE_LOG", default=True),
    "root": {"level": "WARNING", "handlers": ["console"]},
    "formatters": {"verbose": {"format": "%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s"}},
    "handlers": {
        "console": {"level": "DEBUG", "class": "logging.StreamHandler", "formatter": "verbose"},
        "elasticapm": {"level": "WARNING", "class": "elasticapm.contrib.django.handlers.LoggingHandler"},
        "null": {"class": "logging.NullHandler"},
    },
    "loggers": {
        "django.db.backends": {"level": "ERROR", "handlers": ["console"], "propagate": False},
        "rapidpro": {"level": "WARNING", "handlers": ["elasticapm"], "propagate": False},
        "elasticapm.errors": {"level": "ERROR", "handlers": ["console"], "propagate": False},
        "pycountry": {"level": "ERROR", "handlers": ["console"], "propagate": False},
        "django.security.DisallowedHost": {"handlers": ["null"], "propagate": False},
        # OIDC
        "mozilla_django_oidc": {"level": "DEBUG", "handlers": ["console"], "propagate": False},
        "weni_django_oidc": {"level": "DEBUG", "handlers": ["console"], "propagate": False},
    },
}


# APM SERVER
# ------------------------------------------------------------------------------
ELASTIC_APM = {
    "DISABLE_SEND": env.bool("APM_DISABLE_SEND", default=False),
    "DEBUG": env.bool("APM_SERVICE_DEBUG", default=False),
    "SERVICE_NAME": env("APM_SERVICE_NAME", default=""),
    "SECRET_TOKEN": env("APM_SECRET_TOKEN", default=""),
    "SERVER_URL": env("APM_SERVER_URL", default=""),
    "ENVIRONMENT": env("APM_SERVICE_ENVIRONMENT", default="production"),
    "DJANGO_TRANSACTION_NAME_FROM_ROUTE": True,
    "PROCESSORS": (
        "elasticapm.processors.sanitize_stacktrace_locals",
        "elasticapm.processors.sanitize_http_request_cookies",
        "elasticapm.processors.sanitize_http_headers",
        "elasticapm.processors.sanitize_http_wsgi_env",
        "elasticapm.processors.sanitize_http_request_body",
    ),
}


# -----------------------------------------------------------------------------------
# Crontab Settings ..
# -----------------------------------------------------------------------------------
CELERY_BEAT_SCHEDULE["retry-errored-messages"] = {
    "task": "retry_errored_messages",
    "schedule": crontab(hour=1, minute=0),
}
CELERY_BEAT_SCHEDULE["refresh-whatsapp-tokens"] = {"task": "refresh_whatsapp_tokens", "schedule": timedelta(hours=12)}
CELERY_BEAT_SCHEDULE["refresh-whatsapp-templates"] = {
    "task": "refresh_whatsapp_templates",
    "schedule": timedelta(minutes=env.int("REFRESH_WPP_TEMPLATES_TASK_TIME", default=60)),
}

CELERY_BEAT_SCHEDULE["refresh-whatsapp-catalog-and-products"] = {
    "task": "refresh_whatsapp_catalog_and_products",
    "schedule": timedelta(minutes=env.int("REFRESH_WPP_CATALOG_TASK_TIME", default=60)),
}

# -----------------------------------------------------------------------------------
# APPLICATION LOGS
# -----------------------------------------------------------------------------------
RETENTION_PERIODS.update(
    channellog=timedelta(hours=env.int("RETENTION_PERIODS_CHANNELLOG", default=48)),
    flowsession=timedelta(days=env.int("RETENTION_PERIODS_FLOWSESSION", default=7)),
    httplog=timedelta(days=env.int("RETENTION_PERIODS_HTTPLOG", default=3)),
)

# Adds gRPC services
GRPC_FRAMEWORK = {
    "ROOT_HANDLERS_HOOK": "weni.grpc.core.urls.grpc_handlers",
}

# --------------------------------------------------------------------------------------------------
# OpenID Connect settings
# https://mozilla-django-oidc.readthedocs.io/en/stable/installation.html#add-settings-to-settings-py
# --------------------------------------------------------------------------------------------------
OIDC_RP_CLIENT_ID = env("OIDC_RP_CLIENT_ID")
OIDC_RP_CLIENT_SECRET = env("OIDC_RP_CLIENT_SECRET")
OIDC_OP_AUTHORIZATION_ENDPOINT = env("OIDC_OP_AUTHORIZATION_ENDPOINT")
OIDC_OP_TOKEN_ENDPOINT = env("OIDC_OP_TOKEN_ENDPOINT")
OIDC_OP_USER_ENDPOINT = env("OIDC_OP_USER_ENDPOINT")
OIDC_OP_JWKS_ENDPOINT = env("OIDC_OP_JWKS_ENDPOINT")
OIDC_RP_SIGN_ALGO = env("OIDC_RP_SIGN_ALGO", default="RS256")
OIDC_RP_SCOPES = env("OIDC_RP_SCOPES", default="openid email")
OIDC_EXEMPT_URL_PATTERNS = [re.compile(url) for url in env.list("OIDC_EXEMPT_URL_PATTERNS", default=[])]
OIDC_EXEMPT_URLS = OIDC_EXEMPT_URL_PATTERNS + env.list("OIDC_EXEMPT_URLS", default=[])
OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS = env.int("OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS", default=(15 * 60))

# Tells Django to authenticate via OIDC
AUTHENTICATION_BACKENDS += ("weni.auth.backends.WeniOIDCAuthenticationBackend",)
OIDC_DRF_AUTH_BACKEND = "weni.auth.backends.WeniOIDCAuthenticationBackend"

# Used to enable authentication via Keycloak to legacy users
SECRET_KEY_CHECK_LEGACY_USER = env("SECRET_KEY_CHECK_LEGACY_USER")

# By default, rapidpro redirects the user to choose an org after login. Inside Weni Connect, the org is already selected, so we can bypass and take user to msg inbox.
LOGIN_REDIRECT_URL = env("LOGIN_REDIRECT_URL", default="/msg/inbox/")

# Enable Weni Templates
TEMPLATES[0]["OPTIONS"]["context_processors"] += [
    "temba.context_processors_weni.use_weni_layout",
    "temba.context_processors_weni.weni_announcement",
    "temba.context_processors_weni.logrocket",
    "temba.context_processors_weni.show_sidemenu",
    "temba.context_processors_weni.old_design_excluded_channels_codes",
    "temba.context_processors_weni.show_onboard_modal",
    "temba.context_processors_weni.firebase_credentials",
]
WENI_DOMAINS = {"weni": env("WENI_DOMAIN", default="weni.ai")}

# Exclude Weni Sidebar
SIDEBAR_EXCLUDE_PATHS = env.list("SIDEBAR_EXCLUDE_PATHS", default=[])

# Weni Sidebar allowlist
SIDEBAR_ALLOWLIST = env.list("SIDEBAR_ALLOWLIST", default=[])

# Weni announcement
ANNOUNCEMENT_LEFT = env("ANNOUNCEMENT_LEFT")
ANNOUNCEMENT_RIGHT = env("ANNOUNCEMENT_RIGHT")
ANNOUNCEMENT_LINK = env("ANNOUNCEMENT_LINK")
ANNOUNCEMENT_BUTTON = env("ANNOUNCEMENT_BUTTON")

# LOGROCKET
LOGROCKET_IDS = env.dict("LOGROCKET_IDS")
PARENT_IFRAME_DOMAIN = env("PARENT_IFRAME_DOMAIN")

# ------------------------------------------------------------------------------------------
# Production-only: Adjust depending on your proxy
#   https://docs.djangoproject.com/en/2.2/ref/settings/#use-x-forwarded-host
#   https://docs.djangoproject.com/en/2.2/ref/settings/#secure-proxy-ssl-header
# ------------------------------------------------------------------------------------------
USE_X_FORWARDED_HOST = env("USE_X_FORWARDED_HOST", default=False)
SECURE_PROXY_SSL_HEADER = env.tuple("SECURE_PROXY_SSL_HEADER", default=None)


# ------------------------------------------------------------------------------------------
# CSP settings: Needed if we want to load rapidpro from inside an iframe with some security.
#   https://django-csp.readthedocs.io/en/latest/configuration.html
#   https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy
# ------------------------------------------------------------------------------------------
CSP_DEFAULT_SRC = env.tuple("CSP_DEFAULT_SRC", default=("'self'",))
CSP_FRAME_ANCESTORS = env.tuple("CSP_FRAME_ANCESTORS", default=("'self'",))
CSP_FONT_SRC = env.tuple("CSP_FONT_SRC", default=CSP_DEFAULT_SRC)
CSP_STYLE_SRC = env.tuple("CSP_STYLE_SRC", default=CSP_DEFAULT_SRC)
CSP_STYLE_SRC_ELEM = env.tuple("CSP_STYLE_SRC_ELEM", default=CSP_DEFAULT_SRC)
CSP_SCRIPT_SRC = env.tuple("CSP_SCRIPT_SRC", default=CSP_DEFAULT_SRC)
CSP_SCRIPT_SRC_ELEM = env.tuple("CSP_SCRIPT_SRC_ELEM", default=CSP_SCRIPT_SRC)
CSP_FRAME_SRC = env.tuple("CSP_FRAME_SRC", default=CSP_DEFAULT_SRC)
CSP_CONNECT_SRC = env.tuple("CSP_CONNECT_SRC", default=CSP_DEFAULT_SRC)


# Removes 'check-channels' task from Beat Schedule (sent_messages query)
CELERY_BEAT_SCHEDULE.pop("check-channels")

# Exclude list of header that should not appear in webhook and channel logs
EXCLUDED_HTTP_HEADERS = env.list("EXCLUDED_HTTP_HEADERS", default=[])

# Non ISO-639-1 Languages that must be included in temba.utils.languages
NON_ISO6391_LANGUAGES = set(env.tuple("NON_ISO6391_LANGUAGES", default={}))

# the name of our infinity plan
INFINITY_PLAN = "infinity"

# User reset password limit
USER_RECOVER_TIME_INTERVAL = env.int("USER_RECOVER_TIME_INTERVAL", default=12)
USER_RECOVER_MAX_ATTEMPTS = env.int("USER_RECOVER_MAX_ATTEMPTS", default=5)

# Channel that should not be displayed in the old design
OLD_DESIGN_EXCLUDED_CHANNELS_CODES = env.list("OLD_DESIGN_EXCLUDED_CHANNELS_CODES", default=["TG", "WWC", "IG"])


# ------------------------------------------------------------------------------------------
# Option to disable mozilla_django_oidc completely, removing it from:
#   REST_FRAMEWORK["DEFAULT_AUTHENTICATION_CLASSES]
#   MIDDLEWARE
#   INSTALLED_APPS
#   LOGGING
#   AUTHENTICATION_BACKENDS
# ------------------------------------------------------------------------------------------
DISABLE_OIDC = env.bool("DISABLE_OIDC", default=False)
if DISABLE_OIDC:
    REST_FRAMEWORK["DEFAULT_AUTHENTICATION_CLASSES"].remove(
        "mozilla_django_oidc.contrib.drf.OIDCAuthentication"
    )

    installed_apps_list = list(INSTALLED_APPS)
    installed_apps_list.remove("mozilla_django_oidc")
    installed_apps_list.remove("weni.auth")
    INSTALLED_APPS = tuple(installed_apps_list)

    LOGGING["loggers"].pop("mozilla_django_oidc")
    LOGGING["loggers"].pop("weni_django_oidc")

    authentication_backend_list = list(AUTHENTICATION_BACKENDS)
    authentication_backend_list.remove("weni.auth.backends.WeniOIDCAuthenticationBackend")
    AUTHENTICATION_BACKENDS = tuple(authentication_backend_list)

    OIDC_DRF_AUTH_BACKEND = None

CONNECT_BASE_URL = env("CONNECT_BASE_URL", default="https://api.dev.cloud.weni.ai")


# ----------------------------------------------------------------------------------------
# Option to enable redirect all routes (except api), to redirect view 
# ----------------------------------------------------------------------------------------
WENI_REDIRECT_DEPRECATED_DOMAIN = env.bool("WENI_REDIRECT_DEPRECATED_DOMAIN", default=False)
if WENI_REDIRECT_DEPRECATED_DOMAIN:
    MIDDLEWARE = ("temba.middleware.RedirectMiddleware",) + MIDDLEWARE


# Cors Configuration
CORS_ORIGIN_ALLOW_ALL = env.bool("CORS_ORIGIN_ALLOW_ALL", default=False)
CORS_ORIGIN_WHITELIST = env.tuple("CORS_ORIGIN_WHITELIST", default=())


# Fixed token with super user access

FIXED_SUPER_ACCESS_TOKEN = env("FIXED_SUPER_ACCESS_TOKEN")

# ----------------------------------------------------------------------------------------
# The list below excludes from the list the channels that go to the generic integrations channels
# ----------------------------------------------------------------------------------------
DISABLED_CHANNELS_INTEGRATIONS = env.list("DISABLED_CHANNELS_INTEGRATIONS", default=[])


# ----------------------------------------------------------------------------------------
# # Contact import settings
# ----------------------------------------------------------------------------------------

CONTACT_IMPORT_MAX_RECORDS = env.int("CONTACT_IMPORT_MAX_RECORDS", default=25_000)
CONTACT_IMPORT_BATCH_SIZE = env.int("CONTACT_IMPORT_BATCH_SIZE", default=100)


# ----------------------------------------------------------------------------------------
# # FlowEditor feedback firebase database credentials
# ----------------------------------------------------------------------------------------
FIREBASE_API_KEY = env("FIREBASE_API_KEY", default="MISSING_FIREBASE_API_KEY")
FIREBASE_AUTH_DOMAIN = env("FIREBASE_AUTH_DOMAIN", default="MISSING_FIREBASE_AUTH_DOMAIN")
FIREBASE_PROJECT_ID = env("FIREBASE_PROJECT_ID", default="MISSING_FIREBASE_PROJECT_ID")
FIREBASE_STORAGE_BUCKET = env("FIREBASE_STORAGE_BUCKET", default="MISSING_FIREBASE_STORAGE_BUCKET")
FIREBASE_MESSAGING_SENDER_ID = env("FIREBASE_MESSAGING_SENDER_ID", default="MISSING_FIREBASE_MESSAGING_SENDER_ID")
FIREBASE_APP_ID = env("FIREBASE_APP_ID", default="MISSING_FIREBASE_APP_ID")
FIREBASE_MEASUREMENT_ID = env("FIREBASE_MEASUREMENT_ID", default="MISSING_FIREBASE_MEASUREMENT_ID")

# Event Driven Architecture configurations

USE_EDA = env.bool("USE_EDA", default=False)

if USE_EDA:
    EDA_CONNECTION_BACKEND = "temba.event_driven.backends.PyAMQPConnectionBackend"
    EDA_CONSUMERS_HANDLE = "temba.event_driven.handle.handle_consumers"

    EDA_BROKER_HOST = env("EDA_BROKER_HOST", default="localhost")
    EDA_VIRTUAL_HOST = env("EDA_VIRTUAL_HOST", default="/")
    EDA_BROKER_PORT = env.int("EDA_BROKER_PORT", default=5672)
    EDA_BROKER_USER = env("EDA_BROKER_USER", default="guest")
    EDA_BROKER_PASSWORD = env("EDA_BROKER_PASSWORD", default="guest")

BOTHUB_SYNC_INTENTS_URL = env("BOTHUB_SYNC_INTENTS_URL", default="https://nlp.bothub.it/info/")
