-extends "smartmin/base.html"
-load compress temba i18n

-block page-title
  {{ object.name }}

-block extra-style
  %link(rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto+Mono:300|Roboto:300,400,500")

  -for css in styles
    %link(rel="stylesheet" type="text/css" href="{{css}}")

  :css
    body {
      line-height: inherit;
    }

    h2 .icon-phone {
      width: 40px;
    }

    h2 .icon-mobile {
      width: 40px;
    }

    #rp-flow-editor #simulator {
      top: 0px;
    }

    #header *, #top-menu *, .org-header * {
      -webkit-touch-callout: none;
      -webkit-user-select: none;
      -khtml-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
      z-index: 0;
    }

    .ReactModalPortal {
      --curvature: 4px;
      --curvature-widget: 4px;
    }

    /* case_list_case is the dnd portal under body */
    #rp-flow-editor, .case_list_case {
      --curvature: 4px;
      --curvature-widget: 4px; 
    }

    #rp-flow-editor input[type=text] {
      height: inherit !important;
      line-height: inherit;
    }

    #rp-flow-editor p {
      display: block;
      margin-block-start: 1em;
      margin-block-end: 1em;
      margin-inline-start: 0px;
      margin-inline-end: 0px;
    }

    .page-wrap:after {
      height: 0px;
    }

    #rp-flow-editor input:focus {
      box-shadow: none;
      outline: none;
      border: none;
    }

    #header {
      margin: 0;
    }

    #menu {
      line-height: 20px;
    }

    #toolbar h2 {
      margin-top: -5px;
    }

    .org-header {
      z-index: 1000 !important;
      line-height: 20px;
    }

    #top-menu {
      z-index: inherit;
    }

    #top-menu.expanded {
      z-index: 3000 !important;
    }

    .gear-menu.open {
      z-index: 3000;
    }

    #toolbar {
      visibility: visible;
      position: relative;
      padding: 18px 30px;
    }

    #toolbar h2 {
      margin-bottom: 0;
    }

    #pending {
      position: relative;
      right: 0;
      width: 40%;
      height: 36px;
      margin: 0 auto;
      text-align: center;
    }

    #grid {
    }

    #rp-flow-editor {
      visibility: visible;
      width: 100%;
      height: 100%;
    }

    #rp-flow-editor h1 {
      font-weight: 300;
    }

    #grid {
      box-shadow: inset 0 7px 9px -10px rgba(0,0,0,0.4);
    }

    #grid {
      box-shadow: inset 0 7px 9px -10px rgba(0,0,0,0.4);
      
    }

    #rp-flow-editor > div {
      opacity: 0;
      transition: opacity 150ms linear;
    }

    #rp-flow-editor .language-selector {
      /* top: 14px; */
    }

    temba-loading {
      margin-left: 30px;
      padding-top: 25px;
      display: block;
    }

    .page-wrap {
      min-height: inherit;
      padding-bottom: inherit;
      margin-bottom: inherit;
    }

    .footer {
      display: none;
    }

    label, input, button, select, textarea {
      font-size: inherit;
      font-weight: inherit;
      line-height: inherit;
      margin-bottom: 0;
    }

-block extra-script
  {{ block.super }}

  -for script in scripts
    %script(type="text/javascript" src="{{script}}")

  :javascript
    let showUpdates = false;
    let initialGuide = null;
    const base = '/flow/assets/{{object.org.id}}/' + new Date().getTime() + '/';
    const api = '/api/v2/';
    const flowType = '{{ object.engine_type }}';

    window.addEventListener("DOMContentLoaded", function() {
      var confirmation = document.getElementById("confirm-language");
      confirmation.addEventListener("temba-button-clicked", function(event){
        var code = confirmation.dataset.code;
        if(!event.detail.button.secondary) {
          posterize('{% url "flows.flow_change_language" object.id %}?language=' + code);
        }
        confirmation.open = false;
      });
    });

    function handleEditorLoaded() {
      $('temba-loading').hide();
      $('#rp-flow-editor > div').css('opacity', '1');

      {% if use_weni_layout %}
        window.parent.postMessage({ 
          event: 'flowEditorLoaded',
          success: true
        }, '*');
      {% endif %}
    }

    function handleActivityClicked(nodeUUID, count) {
      var endpoint = '{% url "msgs.broadcast_send" %}';
      var modal = document.querySelector("#send-message-modal");
      modal.endpoint = endpoint + "?step_node=" + nodeUUID + "&count=" + count;
      modal.open = true;
    }

    function handleChangeLanguage(code, name) {

      var confirmation = document.getElementById("confirm-language");
      confirmation.classList.remove("hide");
      confirmation.dataset.code = code;
      
      var body = confirmation.querySelector('.body');
      body.innerHTML = body.innerHTML.replace(/%LANG%/g, name);
      confirmation.open = true;      
    }

    function startFlowEditor() {
      const config = {
        flow: '{{object.uuid}}',
        flowType: flowType,
        localStorage: true,
        onLoad: handleEditorLoaded,
        onActivityClicked: handleActivityClicked,
        onChangeLanguage: handleChangeLanguage,
        mutable: {{mutable|lower}},
        filters: {{feature_filters|to_json}},
        brand: '{{brand.name|escapejs}}',

        help: {
          legacy_extra: 'https://help.nyaruka.com/',
          missing_dependency: 'https://help.nyaruka.com/en/article/fixing-missing-dependencies-1toe127/',
          invalid_regex: 'https://help.nyaruka.com/en/article/invalid-regular-expressions-814k8d/'
        },

        endpoints: {

          groups: api + 'groups.json',
          fields: api + 'fields.json',
          labels: api + 'labels.json',
          channels: api + 'channels.json',
          classifiers: api + 'classifiers.json',
          ticketers: api + 'ticketers.json',
          resthooks: api + 'resthooks.json',
          templates: api + 'templates.json',
          flows: api + 'flows.json?archived=false',
          globals: api + 'globals.json',
          users: api + 'users.json',
          topics: api + 'topics.json',
          editor: '/flow/editor',
          completion: '/mr/docs/{{ LANGUAGE_CODE }}/editor.json',

          ticketer_queues: api + 'ticketer_queues.json',
          external_services: api + 'external_services.json',
          external_services_calls_base: '/externals',
          whatsapp_products: api + 'products.json',

          // TODO: migrate to API?
          revisions: '/flow/revisions/{{object.uuid}}/',
          recents: '/flow/recent_messages/{{object.uuid}}/',
          attachments: '/flow/upload_media_action/{{object.uuid}}/',
          languages: base + 'language',
          environment: base + 'environment',
          activity: '/flow/activity/{{object.uuid}}/',
          recipients: '/contact/omnibox?v=2&types=gc',

          {% if can_simulate %}
          simulateStart: '/flow/simulate/{{object.id}}/',
          simulateResume: '/flow/simulate/{{object.id}}/'
          {% endif %}
        },

        showNewUpdates: showUpdates,
        initialGuide: initialGuide
      };

      showFlowEditor(document.getElementById('rp-flow-editor'), config);
    }

  %script{type:"module"}
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.0.0/firebase-app.js";
    import { getAuth, signInAnonymously } from "https://www.gstatic.com/firebasejs/10.0.0/firebase-auth.js";
    import { getFirestore, doc, collection, addDoc, setDoc, getDoc, updateDoc, arrayUnion } from "https://www.gstatic.com/firebasejs/10.0.0/firebase-firestore.js";

    try {
      const firebaseConfig = {
        apiKey: "{{ firebase_api_key }}",
        authDomain: "{{ firebase_auth_domain }}",
        projectId: "{{ firebase_project_id}}",
        storageBucket: "{{ firebase_storage_bucket }}",
        messagingSenderId: "{{ firebase_messaging_sender_id }}",
        appId: "{{ firebase_app_id}}",
        measurementId: "{{ firebase_measurement_id }}"
      };
      const usersCollection = "users";

      const app = initializeApp(firebaseConfig);
      const db = getFirestore(app);
      const auth = getAuth();


      signInAnonymously(auth).then(() => {
        getUserData().then((userData) => {
          if (userData) {
            const { seenV2Updates, seenV3Updates, seenControlToolsUpdates } = userData;
            if (!seenControlToolsUpdates) {
              showUpdates = true;
              markAllUpdatesAsSeen();
            }

            if (!seenV2Updates) {
              initialGuide = 'v2';
              markAllUpdatesAsSeen();
            } else if (!seenControlToolsUpdates) {
              initialGuide = 'control_tools';
              markAllUpdatesAsSeen();
            }
          }
          startFlowEditor();
        }).catch((err) => {
          console.log('Error getting user data', err);
          startFlowEditor();
        })
      }).catch((err) => {
        console.log('Error signing in anonymously', err);
        startFlowEditor();
      });
      

      async function markAllUpdatesAsSeen() {
        updateDoc(doc(db, usersCollection, '{{ user.email|escapejs }}'), {
          seenV2Updates: true,
          seenV3Updates: true,
          seenControlToolsUpdates: true
        });
      }
    

      async function getUserData() {
        const userEmail = '{{ user.email|escapejs }}';
        const userRef = doc(db, usersCollection, userEmail);
        const userSnap = await getDoc(userRef);

        if (userSnap.exists()) {
          return userSnap.data();
        } else {
          await setDoc(userRef, { seenV3Updates: true });
          return { seenV3Updates: false };
        }
      }
    } catch (err) {
      console.error(err)
      startFlowEditor();
    }


-block page-container

  %temba-modax#send-message-modal{ header:"Send Message" }

  .top-bar.pb-2
    .flex.flex-col.pt-4
      .flex.px-6.pb-2

        -if use_weni_layout and not show_sidemenu
          %div.mr-4.pt-2
            -include "../weni/weni_navigation_control.haml"

        .title.flex-grow
          .flex.page-title
            -if flow.flow_type == 'V'
              .icon-phone.mt-2.mr-6
            -elif flow.flow_type == 'S'
              .icon-mobile.mt-2.mr-6
            .ml-0
              {{title}}
        .menu
          -include "gear_links_include.haml"

      -if is_starting
        .p-3.bg-gray-100.w-full.text-center
          -blocktrans trimmed
            This flow is in the process of being sent, this message will disappear once all contacts have been added to the flow.

  %temba-dialog.hide#confirm-language(header='{{_("Change Language")|escapejs}}' primaryButtonName='{{_("Update")|escapejs}}')
    .p-6.body
      -blocktrans trimmed with language="%LANG%"
        This will change the default language of the flow to <b>{{ language }}</b>. This means that by default the
        flow will be appear in that language and can be translated into other languages. Also if a contact is
        in this flow and no translation exists for their language or the default language of the workspace,
        communication with that contact will default to <b>{{ language }}</b>.

  #grid.h-full.overflow-hidden
    <temba-loading units="10" size="8"></temba-loading>
    #rp-flow-editor

  -if use_weni_layout
    -include "../weni/floweditor_feedback.html"

