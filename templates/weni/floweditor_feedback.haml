-load smartmin i18n humanize temba compress

-block extra-style
  :css
    #floweditor-feedback {
      position: fixed;
      bottom: -1px;
      right: 90px;
      z-index: 9999;
    }

    #floweditor-feedback .launcher {
      display: flex;
      gap: 4px;
      padding: 4px;
      align-items: center;
      position: relative;
      color: #FFF;
      border: 1px solid #E2E6ED;
      border-radius: 4px 4px 0px 0px;
      background: var(--color-weni-600, #00A49F);
      box-shadow: 0px 12px 34px 0px rgba(0, 0, 0, 0.04);
      width: 85px;

      -webkit-transition: all .2s ease-out;
      -moz-transition: all .2s ease-out;
      -o-transition: all .2s ease-out;
      transition: all .2s ease-out;;

      font-family: Lato;
      font-size: 12px;
    }

    #floweditor-feedback .launcher:hover {
      cursor: pointer;
      background: #028380;
    }

    #floweditor-feedback .launcher .material-symbols-outlined {
      font-size: 20px;
    }

    #floweditor-feedback .launcher.alert-badge::before {
      content: '';
      position: absolute;
      width: 10px;
      height: 10px;
      background-color: #E53E3E;
      border-radius: 600px;
      right: -2px;
      top: -3px;
    }

    #floweditor-feedback .content {
      width: 326px;
      position: fixed;
      bottom: 40px;
      right: 90px;
      padding: 16px;
      flex-direction: column;
      align-items: center;
      gap: 16px;
      border-radius: 4px;
      background: #F9F9F9;

      box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.08);
    }

    #floweditor-feedback .content .rating {
      display: flex;
      flex-direction: column;
      gap: 16px;
    }

    #floweditor-feedback .content .feedback {
      flex-direction: column;
      align-items: center;
      gap: 16px;
    }

    #floweditor-feedback .content .rate-again {
      flex-direction: column;
      gap: 16px;
    }

    #floweditor-feedback .content .rate-again .text {
      display: flex;
      flex-direction: column;
      align-items: baseline;
    }

    #floweditor-feedback .content .rate-again .text span {
      text-wrap: balance;
      color: #272B33;

      font-family: Lato;
      font-size: 14px;
      font-style: normal;
      font-weight: 700;
      line-height: 22px;
    }

    #floweditor-feedback .content .rate-again .buttons {
      margin-top: 8px;
    }

    #floweditor-feedback .content .header {
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      width: 100%;

      color: var(--neutral-darkest, #3B414D);

      /* Lato / Regular / Body Greater */
      font-family: Lato;
      font-size: 14px;
      font-style: normal;
      font-weight: 400;
      line-height: 22px; /* 157.143% */
    }

    #floweditor-feedback .content .header .close-icon {
      background-color: #4E5666;
      opacity: 1;
      cursor: pointer;
      margin-top: 3px;
    }

    #floweditor-feedback .content .header .text {
      display: flex;
      flex-direction: column;
    }

    #floweditor-feedback .content .thanks {
      color: var(--color-weni-600, #00A49F);
      text-align: center;

      /* Lato/Regular/Body Medium */
      font-family: Lato;
      font-size: 12px;
      line-height: 20px; /* 166.667% */

      -webkit-transition: all .3s ease-out;
      -moz-transition: all .3s ease-out;
      -o-transition: all .3s ease-out;
      transition: all .3s ease-out;
    }

    #floweditor-feedback .content .options-wrapper {
      display: flex;
      flex-direction: column;
      gap: 8px;      
    }

    #floweditor-feedback .content .phrase {
      color: var(--neutral-darkest, #3B414D);

      /* Lato / Bold / Body Greater */
      font-family: Lato;
      font-size: 14px;
      font-style: normal;
      font-weight: 700;
      line-height: 22px; /* 157.143% */
    }

    #floweditor-feedback .content .options {
      display: flex;
      justify-content: center;
      align-items: center;
      align-self: stretch;
      border-radius: 4px;
      border: 1px solid var(--color-neutral-cleanest, #D0D3D9);
    }

    #floweditor-feedback .content .options.colored {
      padding: var(--spacing-xs, 8px) var(--spacing-sm, 16px);
      border-radius: 4px;
      border: 1px solid var(--color-weni-600, #00A49F);
      background: var(--color-weni-50, #EEFFFC);
    }

    #floweditor-feedback .content .options .option {
      display: flex;
      padding: 8px 16px;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      gap: 10px;
      flex: 1 0 0;
      width: 58px;

      border-right: 1px solid var(--color-neutral-cleanest, #D0D3D9);

      font-family: Lato;
      font-size: 12px;
      font-style: normal;
      font-weight: 400;
      line-height: 20px;
      background: rgba(249, 249, 249, 1);
      -webkit-transition: all .3s ease-out;
      -moz-transition: all .3s ease-out;
      -o-transition: all .3s ease-out;
      transition: all .3s ease-out;;
    }

    #floweditor-feedback #feedback-option1 {
      border-radius: 3px 0 0 3px;
    }

    #floweditor-feedback #feedback-option5 {
      border-right: none;
      border-radius: 0 3px 3px 0;
    }

    #floweditor-feedback .content .options .option:hover {;
      background: #F4F6F8;
      cursor: pointer;
    }

    #floweditor-feedback .content .options .option:active {;
      background: #D0D3D9;
    }

    #floweditor-feedback .content .options .option.selected {
      background: #EEFFFC;
    }

    #floweditor-feedback .content .options img {
      width: 24px;
      height: 24px;
    }

    #floweditor-feedback .content .labels {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      gap: var(--spacing-xs, 8px);
      align-self: stretch;
    }

    #floweditor-feedback .content .labels .text {
      width: 58px;
      color: var(--neutral-darkest, #3B414D);
      font-family: Lato;
      font-size: 12px;
      font-style: normal;
      font-weight: 400;
      line-height: 16px; /* 133.333% */
    }

    #floweditor-feedback .content .labels .text.left {
      text-align: left;
    }

    #floweditor-feedback .content .labels .text.right {
      text-align: right;
    }

    #floweditor-feedback .content .opaque {
      opacity: 0;
    }

    #floweditor-feedback .content .bottom {
      color: #272B33;
      text-align: center;

      font-family: Lato;
      font-size: 12px;
      font-style: normal;
      font-weight: 400;
      line-height: 20px;
    }

    #floweditor-feedback .content #feedback-textarea {
      margin-bottom: 8px;

      outline: none;
      height: 80px;
      width: 100%;
      resize: none;
      box-sizing: border-box;
      padding: 8px;
      border-radius: 4px;
      border: 1px solid #E2E6ED;
      background: #FFF;

      color: #4E5666;
      font-family: Lato;
    }

    #floweditor-feedback .content #feedback-textarea::placeholder {
      color: #67738B;
      font-family: Lato;
      font-size: 14px;
      line-height: 22px;
      opacity: 0.7;
    }

    #floweditor-feedback .content #feedback-textarea:focus {
      border-color: #9CACCC;
    }

    #floweditor-feedback .content #feedback-textarea:focus::placeholder {
      color: #D0D3D9;
    }

    #floweditor-feedback .content .buttons {
      display: flex;
      gap: 32px; 
    }

    #floweditor-feedback .content .buttons #send-feedback {
      background: #00A49F;
    }

    #floweditor-feedback .content .buttons #send-feedback:hover {
      opacity: 0.8;
    }

    #floweditor-feedback .content .buttons #skip-feedback {
      border: 1px solid transparent;
    }

    #floweditor-feedback .content .buttons #skip-feedback:hover {
      border: 1px solid #E2E6ED;
    }

    .slide-in-left {
      -webkit-animation: slide-in-left 0.75s ease both;
              animation: slide-in-left 0.75s ease both;
    }
    @-webkit-keyframes slide-in-left {
      0% {
        -webkit-transform: translateX(-100px);
                transform: translateX(-100px);
        opacity: 0;
      }
      70% {
        -webkit-transform: translateX(10px);
                transform: translateX(10px);
        opacity: 0.7;
      }
      100% {
        -webkit-transform: translateX(0);
                transform: translateX(0);
        opacity: 1;
      }
    }
    @keyframes slide-in-left {
      0% {
        -webkit-transform: translateX(-100px);
                transform: translateX(-100px);
        opacity: 0;
      }
      70% {
        -webkit-transform: translateX(10px);
                transform: translateX(10px);
        opacity: 0.7;
      }
      100% {
        -webkit-transform: translateX(0);
                transform: translateX(0);
        opacity: 1;
      }
    }

    .fade-in {
      -webkit-animation: fade-in 0.5s cubic-bezier(0.390, 0.575, 0.565, 1.000) both;
              animation: fade-in 0.5s cubic-bezier(0.390, 0.575, 0.565, 1.000) both;
    }
    @-webkit-keyframes fade-in {
      0% {
        opacity: 0;
      }
      100% {
        opacity: 1;
      }
    }
    @keyframes fade-in {
      0% {
        opacity: 0;
      }
      100% {
        opacity: 1;
      }
    }

    .fade-out {
      -webkit-animation: fade-out 0.3s ease-out both;
              animation: fade-out 0.3s ease-out both;
    }
    @-webkit-keyframes fade-out {
      0% {
        opacity: 1;
      }
      100% {
        opacity: 0;
      }
    }
    @keyframes fade-out {
      0% {
        opacity: 1;
      }
      100% {
        opacity: 0;
      }
    }

    #success-toast {
      position: fixed;
      bottom: 40px;
      right: 16px;
      border-radius: 4px;
      background: #FFF;

      box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.10);
    }

    #success-toast .toast-content {
      display: flex;
      padding: 12px;
      justify-content: center;
      align-items: center;
      gap: 8px;
    }

    #success-toast .toast-content .toast-icon {
      background-color: #47D66F;
    }

    #success-toast .toast-content .toast-text {
      color: #3B414D;

      font-family: Lato;
      font-size: 14px;
      font-style: normal;
      font-weight: 400;
      line-height: 21px;
    }

    #success-toast .toast-content .toast-close-button {
      color: #CCC;
      text-align: right;

      font-family: Lato;
      font-size: 12px;
      font-style: normal;
      font-weight: 400;
      line-height: 20px;
    }



#floweditor-feedback
  .content.hidden
    .rating
      .header
        %span.text
          %span
            {{ _("Quick search!") }}
          %span
            {{ _("What do you think of this sentence:") }}
        %span.close-icon.weni-unnnic-icon-close-1.weni-unnnic-icon-sm{onclick: "toggleFeedback()"}

      
      %div.options-wrapper#options-wrapper
        %span.phrase
          {{ _("The Flow Editor is easy and enjoyable to use") }}

        #options.options
          #feedback-option1.option{onclick:"saveRating(1)"}
            1

          #feedback-option2.option{onclick:"saveRating(2)"}
            2
          
          #feedback-option3.option{onclick:"saveRating(3)"}
            3

          #feedback-option4.option{onclick:"saveRating(4)"}
            4

          #feedback-option5.option{onclick:"saveRating(5)"}
            5

          %span#rating-thanks.opaque.hidden.thanks
            {{ _("Thank you!") }}

      %div.labels
        %span.text.left
          {{ _("Strongly disagree") }}
        %span.text.right
          {{ _("Strongly agree") }}

    .feedback.hidden
      .header
        %span.text
          {{ _("Want to add a comment?") }}
        %span.close-icon.weni-unnnic-icon-close-1.weni-unnnic-icon-sm{onclick: "toggleFeedback()"}

      {% translate "Write here..." as textarea_placeholder %}
      %textarea#feedback-textarea{placeholder:"{{ textarea_placeholder }}"}

      .buttons.w-full
        #skip-feedback{class: "weni-unnnic-button weni-unnnic-button--terciary weni-unnnic-button--size-small w-full", onclick:"toggleFeedback()"}
          {{ _("Close") }}
        #send-feedback{class: "weni-unnnic-button weni-unnnic-button--primary weni-unnnic-button--size-small w-full", onclick:"sendFeedback()"}
          {{ _("Submit comment") }}

    .rate-again.hidden
      .header
        %span.text
          {{ _("Thank you!") }}
        %span.close-icon.weni-unnnic-icon-close-1.weni-unnnic-icon-sm{onclick: "toggleFeedback()"}

      .text
        %span
          {{ _("You have already rated your experience this week,") }}
        %span
          {{ _("would you like to rate it again?") }}

      .buttons.w-full
        #skip-feedback{class: "weni-unnnic-button weni-unnnic-button--terciary weni-unnnic-button--size-small w-full", onclick:"toggleFeedback()"}
          {{ _("Close") }}
        #send-feedback{class: "weni-unnnic-button weni-unnnic-button--primary weni-unnnic-button--size-small w-full", onclick:"restartRating()"}
          {{ _("Rate again") }}

  %div.launcher.hidden{onclick: "toggleFeedback()"}
    %span.material-symbols-outlined
      add_comment
    {{ _("Feedback") }}


#success-toast.hidden
  .toast-content
    .toast-icon.weni-unnnic-check-circle-1-1.weni-unnnic-icon-sm
    .toast-text
      {{ _("Your review has been submitted! Thank you.") }}
    .toast-close-button{onclick:"hideSuccessToast()"}
      {{ _("CLOSE") }}

-block extra-script
  %script{type:"module"}
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.0.0/firebase-app.js";
    import { getAuth, signInAnonymously } from "https://www.gstatic.com/firebasejs/10.0.0/firebase-auth.js";
    import { getFirestore, doc, collection, addDoc, setDoc, getDoc, updateDoc, arrayUnion } from "https://www.gstatic.com/firebasejs/10.0.0/firebase-firestore.js";

    const firebaseConfig = {
      apiKey: "{{ firebase_api_key }}",
      authDomain: "{{ firebase_auth_domain }}",
      projectId: "{{ firebase_project_id}}",
      storageBucket: "{{ firebase_storage_bucket }}",
      messagingSenderId: "{{ firebase_messaging_sender_id }}",
      appId: "{{ firebase_app_id}}",
      measurementId: "{{ firebase_measurement_id }}"
    };
    const feedbacksCollection = "feedbacks";
    const usersCollection = "users";

    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);
    const auth = getAuth();

    let lastRatingRef = null;

    try {
      await signInAnonymously(auth)

      const userData = await getUserData();
      if (!userData) {
        showAlertAndDelay();
      } else {
        const { lastFeedbackTime, lastFeedbackId } = userData;
        if (lastFeedbackTime) {
          lastRatingRef = lastFeedbackId;
          const diff = getLastFeedbackDiff(lastFeedbackTime);
          if (diff > 0) {
            showAlertAndDelay();
          } else {
            changeToRateAgain();
          }
        } else {
          showAlertAndDelay();
        }
      }

      showFeedbackLauncher();
    } catch (error) {
      hideFeedbackLauncher();
    }

    async function saveRatingResponse(rating) {
      lastRatingRef = null;
      const userEmail = '{{ user.email|escapejs }}';
      const userName = '{{ user.name|escapejs }}';
      const createdOn = new Date().toISOString();

      try {
        const userData = await getUserData();

        if (userData) {
          const { lastFeedbackTime, lastFeedbackId } = userData;
          if (lastFeedbackTime) {
            const diff = getLastFeedbackDiff(lastFeedbackTime);
            if (diff > 0) {
              await addFeedback(userEmail, userName, rating, createdOn);
            } else {
              const ratingRef = doc(db, feedbacksCollection, lastFeedbackId);
              await updateDoc(ratingRef, {
                rating,
              });
              lastRatingRef = lastFeedbackId;
            }
          } else {
            await addFeedback(userEmail, userName, rating, createdOn);
          }
        } else {
          await addFeedback(userEmail, userName, rating, createdOn);
        }
      } catch (e) {
        lastRatingRef = null;
      }
      setUserLastFeedback(lastRatingRef);
    }

    async function saveFeedbackResponse(feedback) {
      const userEmail = '{{ user.email|escapejs }}';
      const feedbackDate = new Date().toISOString();

      const ratingRef = doc(db, feedbacksCollection, lastRatingRef);

      await updateDoc(ratingRef, {
        feedback: feedback.trim(),
      });

      setUserLastFeedback(lastRatingRef);
      lastRatingRef = null;
    }

    async function addFeedback(userEmail, userName, rating, createdOn) {
      const docRef = await addDoc(collection(db, feedbacksCollection), {
        userEmail,
        userName,
        rating,
        createdOn,
      });

      lastRatingRef = docRef.id;
      return docRef;
    }

    async function getUserData() {
      const userEmail = '{{ user.email|escapejs }}';
      const userRef = doc(db, usersCollection, userEmail);
      const userSnap = await getDoc(userRef);

      if (userSnap.exists()) {
        return userSnap.data();
      } else {
        return null;
      }
    }

    async function setUserLastFeedback(feedbackId) {
      if (feedbackId) {
        const userEmail = '{{ user.email|escapejs }}';
        const userRef = doc(db, usersCollection, userEmail);
        const userSnap = await getDoc(userRef);

        if (userSnap.exists()) {
          await updateDoc(userRef, {
            lastFeedbackTime: new Date().getTime(),
            lastFeedbackId: feedbackId,
          });
        } else {
          await setDoc(userRef, {
            lastFeedbackTime: new Date().getTime(),
            lastFeedbackId: feedbackId,
          });
        }
      }
    }

    window.saveRatingResponse = saveRatingResponse;
    window.saveFeedbackResponse = saveFeedbackResponse;
    window.getUserData = getUserData;

  :javascript
    let showRateAgain = false;
    let toggleTimeoutId = null;

    function debounce(func, timeout = 1000){
      let timer;
      return (...args) => {
        if (!timer) {
          func.apply(this, args);
        }
        clearTimeout(timer);
        timer = setTimeout(() => {
          timer = undefined;
        }, timeout);
      };
    }

    function getLastFeedbackDiff(lastFeedback) {
      const today = new Date();
      today.setHours(0, 0, 0, 0)
      const prevMonday = new Date();
      prevMonday.setDate(today.getDate() - (today.getDay()||7));
      prevMonday.setHours(0, 0, 0, 0)
      return prevMonday.getTime() - lastFeedback;
    }

    function showAlertAndDelay() {
      showAlertBadge();
      delayedToggle();
    }

    function delayedToggle() {
      const timeout = 10 * 60 * 1000;
      toggleTimeoutId = setTimeout(() => {
        if ($('.content').hasClass('hidden')) {
          toggleFeedback();
        }
      }, timeout)
    }

    function clearDelayTimeout() {
      if (toggleTimeoutId) {
        clearTimeout(toggleTimeoutId);
        toggleTimeoutId = null;
      }
    }

    function showAlertBadge() {
      const launcher = $('#floweditor-feedback .launcher');
      launcher.addClass('alert-badge');
    }

    function hideAlertBadge() {
      const launcher = $('#floweditor-feedback .launcher');
      launcher.removeClass('alert-badge');
    }

    function hideFeedbackLauncher() {
      const launcher = $('#floweditor-feedback .launcher');
      launcher.addClass('fade-out');
      launcher.addClass('hidden');
    }

    function showFeedbackLauncher() {
      const launcher = $('#floweditor-feedback .launcher');
      launcher.addClass('fade-in');
      launcher.removeClass('fade-out');
      launcher.removeClass('hidden');
    }

    const toggleFeedback = debounce(async () => {
      const content = $('#floweditor-feedback .content');

      if (content.hasClass('hidden')) {
        const userData = await getUserData();
        if (userData) {
          const { lastFeedbackTime } = userData;
          if (lastFeedbackTime) {
            const diff = getLastFeedbackDiff(lastFeedbackTime)
            if (diff < 0 && showRateAgain) {
              changeToRateAgain();
            }
          }
        }
        content.addClass('fade-in');
        content.removeClass('hidden');
      } else {
        content.removeClass('fade-in');
        content.addClass('fade-out');
        setTimeout(hideContent, 250);
      }

      hideAlertBadge();
      clearDelayTimeout();
    }, 250)

    function hideContent() {
      const content = $('#floweditor-feedback .content');
      content.removeClass('fade-out');
      content.addClass('hidden');
    }

    const saveRating = debounce((rating) => {
      function showOnlySelected() {
        $("div[id^='feedback-option']").hide();

        option.show();
        option.addClass('slide-in-left');
        $("#rating-thanks").css('opacity', "1");
      }

      function showThanks() {
        $("div[id^='feedback-option']").hide();

        $("#options").addClass('colored')
        $("#rating-thanks").show();
        $("#rating-thanks").css('display','flex');
        $("#rating-thanks").css('opacity', "1");
        $("#rating-thanks").addClass('slide-in-left');
      }

      saveRatingResponse(rating);
      const option = $(`#feedback-option${rating}`);
      option.addClass('selected');

      setTimeout(showThanks, 250);

      setTimeout(changeToFeedback, 2000);
      $("div[id^='feedback-option']").removeClass('fade-out');
      clearDelayTimeout();
    })

    function changeToFeedback() {
      const rating = $('.rating');
      const feedback = $('.feedback');

      rating.addClass('fade-out');
      rating.hide();
      feedback.addClass('fade-in');
      feedback.removeClass('hidden');
      feedback.css('display','flex');
    }

    function changeToRating() {
      const rating = $('.rating');
      const feedback = $('.feedback');
      const rateAgain = $('.rate-again');
      const options = $('#options');

      options.removeClass('colored');
      feedback.removeClass('fade-out');
      feedback.removeClass('fade-in');
      feedback.hide();
      rateAgain.removeClass('fade-out');
      rateAgain.removeClass('fade-in');
      rateAgain.hide();
      rating.removeClass('fade-out');
      rating.addClass('fade-in');
      rating.removeClass('hidden');
      rating.css('display','flex'); 

      $("#rating-thanks").css('opacity', "0");
      $("#rating-thanks").removeClass('slide-in-left');
      $("#rating-thanks").hide();
      $("div[id^='feedback-option']").removeClass('selected');
      $("div[id^='feedback-option']").removeClass('slide-in-left');
      $("div[id^='feedback-option']").show();
    }

    const sendFeedback = debounce(() => {
      const feedback = $('#feedback-textarea').val();
      if (feedback && feedback.trim()) {
        saveFeedbackResponse(feedback);
        toggleSuccessToast();
      }
      toggleFeedback();

      showRateAgain = true;
      setTimeout(changeToRateAgain, 500);
      $('#feedback-textarea').val("");

      isInFeedback = false;
      clearDelayTimeout();
    })

    function toggleSuccessToast() {
      const toast = $('#success-toast');
      toast.removeClass('hidden');
      setTimeout(hideSuccessToast, 5000);
    }

    function hideSuccessToast() {
      const toast = $('#success-toast');
      toast.addClass('fade-out');
      setTimeout(hideToast, 500);
    }

    function hideToast() {
      const toast = $('#success-toast');
      toast.addClass('hidden');
      toast.removeClass('fade-out');
    }

    function changeToRateAgain() {
      const rating = $('.rating');
      const feedback = $('.feedback');
      const rateAgain = $('.rate-again');

      rating.addClass('fade-out');
      rating.hide();
      feedback.addClass('fade-out');
      feedback.hide();
      rateAgain.addClass('fade-in');
      rateAgain.removeClass('hidden');
      rateAgain.css('display','flex');
    }

    const restartRating = debounce(() => {
      const rateAgain = $('#floweditor-feedback .rate-again');
      rateAgain.addClass('fade-out');
      showRateAgain = false;

      setTimeout(changeToRating, 500);
    })